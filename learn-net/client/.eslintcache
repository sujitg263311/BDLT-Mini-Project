[{"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/index.js":"1","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/App.js":"2","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Navbar.js":"3","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/UserContext.js":"4","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Footer.js":"5","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Error.js":"6","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Home.js":"7","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/student.js":"8","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/educator.js":"9","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/signup.js":"10","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/login.js":"11","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Course.js":"12","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/metamask_error.js":"13","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/CourseCard.js":"14","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/infopanel.js":"15","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Introduction.js":"16","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Search.js":"17","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/SubmissionCard.js":"18","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/index.js":"19","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/App.js":"20","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/UserContext.js":"21","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Footer.js":"22","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/student.js":"23","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Navbar.js":"24","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/login.js":"25","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Home.js":"26","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/signup.js":"27","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Course.js":"28","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Error.js":"29","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/educator.js":"30","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/CourseCard.js":"31","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/infopanel.js":"32","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/metamask_error.js":"33","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Search.js":"34","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Introduction.js":"35","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/SubmissionCard.js":"36"},{"size":261,"mtime":1711776596000,"results":"37","hashOfConfig":"38"},{"size":4725,"mtime":1711797235204,"results":"39","hashOfConfig":"38"},{"size":2206,"mtime":1711798375328,"results":"40","hashOfConfig":"38"},{"size":83,"mtime":1711776596000,"results":"41","hashOfConfig":"38"},{"size":242,"mtime":1711798612981,"results":"42","hashOfConfig":"38"},{"size":252,"mtime":1711776598000,"results":"43","hashOfConfig":"38"},{"size":1399,"mtime":1711797239978,"results":"44","hashOfConfig":"38"},{"size":7271,"mtime":1711818918322,"results":"45","hashOfConfig":"38"},{"size":17164,"mtime":1711808735664,"results":"46","hashOfConfig":"38"},{"size":4418,"mtime":1711802827309,"results":"47","hashOfConfig":"38"},{"size":4719,"mtime":1711798930594,"results":"48","hashOfConfig":"38"},{"size":11596,"mtime":1711811576205,"results":"49","hashOfConfig":"38"},{"size":559,"mtime":1711776598000,"results":"50","hashOfConfig":"38"},{"size":2885,"mtime":1711776598000,"results":"51","hashOfConfig":"38"},{"size":557,"mtime":1711776598000,"results":"52","hashOfConfig":"38"},{"size":1446,"mtime":1711776598000,"results":"53","hashOfConfig":"38"},{"size":2676,"mtime":1711797994048,"results":"54","hashOfConfig":"38"},{"size":5156,"mtime":1711776598000,"results":"55","hashOfConfig":"38"},{"size":261,"mtime":1711839796694,"results":"56","hashOfConfig":"57"},{"size":4725,"mtime":1711839796640,"results":"58","hashOfConfig":"57"},{"size":83,"mtime":1711839796640,"results":"59","hashOfConfig":"57"},{"size":242,"mtime":1711839796691,"results":"60","hashOfConfig":"57"},{"size":7271,"mtime":1711840565509,"results":"61","hashOfConfig":"57"},{"size":2206,"mtime":1711839796691,"results":"62","hashOfConfig":"57"},{"size":4719,"mtime":1711839796692,"results":"63","hashOfConfig":"57"},{"size":1422,"mtime":1711840850719,"results":"64","hashOfConfig":"57"},{"size":4418,"mtime":1711839796692,"results":"65","hashOfConfig":"57"},{"size":12531,"mtime":1711842148800,"results":"66","hashOfConfig":"57"},{"size":252,"mtime":1711839796691,"results":"67","hashOfConfig":"57"},{"size":17164,"mtime":1711840552801,"results":"68","hashOfConfig":"57"},{"size":3279,"mtime":1711840551045,"results":"69","hashOfConfig":"57"},{"size":557,"mtime":1711839796692,"results":"70","hashOfConfig":"57"},{"size":559,"mtime":1711839796692,"results":"71","hashOfConfig":"57"},{"size":2676,"mtime":1711839796692,"results":"72","hashOfConfig":"57"},{"size":1530,"mtime":1711840560080,"results":"73","hashOfConfig":"57"},{"size":5156,"mtime":1711839796692,"results":"74","hashOfConfig":"57"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"184vqx5",{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"77"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"77"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"77"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"77"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"1y29wmo",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"118"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"118"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"118"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"118"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/index.js",[],["157","158"],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/App.js",[],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Navbar.js",[],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/UserContext.js",[],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Footer.js",[],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Error.js",[],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Home.js",["159"],"import React from \"react\";\nimport Metamask_Error from \"./metamask_error\";\nimport ethbg_png from \"../assets/eth_gif.gif\";\nimport Search from \"./Search\";\nimport Introduction from \"./Introduction\";\nimport \"../styles/Home.css\";\n\nexport const Home = ({ address, contract, t_contract, ts_contract, error }) => {\n  if (error) {\n    return <Metamask_Error />;\n  } else {\n    return (\n      <div className=\"Home\">\n        <Search\n          address={address}\n          contract={contract}\n          t_contract={t_contract}\n          ts_contract={ts_contract}\n        />\n        <div className=\"intro-container\">\n          <div className=\"intro-text\">\n            <h1>LearnNet</h1>\n            <p id=\"introduction\">\n              An Ethereum Blockchain based Education Platform\n            </p>\n            <p id=\"quote\">\"The more you learn the more you earn\"</p>\n          </div>\n          <div className=\"intro-img\">\n            <img src={ethbg_png} alt=\"blockchain_animation\"></img>\n          </div>\n        </div>\n        <div className=\"information\">\n          <p>\n            EDBX Token Address: {t_contract?._address}{\" \"}\n            <i\n              className=\"far fa-copy\"\n              onClick={() => {\n                navigator.clipboard.writeText(t_contract._address.toString());\n              }}\n            ></i>\n          </p>\n        </div>\n        <Introduction />\n      </div>\n    );\n  }\n};\n","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/student.js",["160","161"],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/educator.js",["162","163","164"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Nav, Button, Badge, Row, Col, Tab, Modal } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"../styles/Educator.css\";\nimport { UserContext } from \"../UserContext\";\nimport SubmissionCard from \"./SubmissionCard\";\nimport CourseCard from \"./CourseCard\";\nimport Metamask_Error from \"./metamask_error\";\nconst axios = require(\"axios\");\n\nexport const Educator = ({ address, contract, t_contract, ts_contract }) => {\n  const { id } = useContext(UserContext);\n  const [count, setCount] = useState(0);\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const [courseID, setCourseID] = useState(1);\n  const [name, setName] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [authorID, setAuthorID] = useState(1);\n  const [price, setPrice] = useState(0);\n  const [ques, setQues] = useState(\"\");\n  const [dline, setDline] = useState(1);\n  const [results, setResults] = useState([]);\n  const [submissions, setSubmissions] = useState([]);\n  const [thumbnail, setThumbnail] = useState();\n  const [content, setContent] = useState();\n  const [video, setVideo] = useState();\n  const [isThumbnailPicked, setThumbnailPicked] = useState(false);\n  const [isContentPicked, setContentPicked] = useState(false);\n  const [isVideoPicked, setVideoPicked] = useState(false);\n  const [cd, setCD] = useState(0);\n  const [balance, setBalance] = useState(0);\n\n  useEffect(async () => {\n    const getDetails = async () => {\n      if (contract !== undefined && id.id != null) {\n        await contract.methods\n          .getCourseCount()\n          .call()\n          .then((res) => {\n            setCourseID(parseInt(res[0]) + 1);\n          });\n        await contract.methods\n          .getEducator(id.id)\n          .call()\n          .then((res) => {\n            if (res !== null && res !== undefined) {\n              setAuthorID(res[0]);\n              setAuthor(res[1]);\n              if (res[4]) setCount(res[4].length);\n            }\n          });\n      }\n    };\n    const getSubmissions = async () => {\n      axios\n        .post(\n          \"http://localhost:4000/submissions/edu_submissions\",\n          { id: id.id },\n          { headers: { \"Content-Type\": \"application/json\" } }\n        )\n        .then((res) => {\n          if (res.data !== undefined) setSubmissions(res.data);\n        })\n        .catch((err) => {\n          if (!err) {\n            console.log(\"Network Error\");\n          } else console.log(err);\n        });\n    };\n    getDetails();\n    getCourses();\n    getSubmissions();\n    getBalance();\n  }, [contract]);\n\n  const t_changeHandler = (e) => {\n    setThumbnail(e.target.files[0]);\n    setThumbnailPicked(true);\n  };\n  const c_changeHandler = (e) => {\n    setContent(e.target.files[0]);\n    setContentPicked(true);\n  };\n  const v_changeHandler = (e) => {\n    setVideo(e.target.files[0]);\n    setVideoPicked(true);\n  };\n\n  const uploadCourse = async (e) => {\n    e.preventDefault();\n    handleClose();\n    await contract.methods\n      .addCourse(\n        name,\n        desc,\n        author,\n        parseInt(price),\n        parseInt(dline),\n        parseInt(authorID)\n      )\n      .send({ from: address }, (err, hash) => {\n        if (err) console.log(\"Error: \", err);\n        else console.log(\"Hash: \", hash);\n      });\n    await contract.methods\n      .getCourseCount()\n      .call()\n      .then((res) => {\n        setCD(parseInt(res));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    await contract.methods\n      .getCourse(parseInt(cd))\n      .call()\n      .then((res) => {\n        setDline(res[7]);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    const form = new FormData();\n    form.append(\"name\", name);\n    form.append(\"id\", courseID);\n    form.append(\"description\", desc);\n    form.append(\"author\", author);\n    form.append(\"author_id\", authorID);\n    form.append(\"address\", address);\n    form.append(\"price\", price);\n    form.append(\"question\", ques);\n    form.append(\"deadline\", dline);\n    form.append(\"thumbnail\", thumbnail);\n    form.append(\"content\", content);\n    form.append(\"video\", video);\n    console.log(content);\n\n    const imageContent = new FormData();\n    imageContent.append(\"file\", thumbnail);\n\n    const pdfContent = new FormData();\n    pdfContent.append(\"file\", content);\n\n    const videoContent = new FormData();\n    videoContent.append(\"file\", video);\n    // form.append(\"content\", content);\n\n    const resFile1 = await axios({\n      method: \"post\",\n      url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n      data: imageContent,\n      headers: {\n        pinata_api_key: `d76c8114a0507d7487f6`,\n        pinata_secret_api_key: `2eeb01942559b51fff940cab063a77afd208a4c5ca13dd57d58a8647a9ad67b4`,\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile1.data.IpfsHash}`;\n    form.append(\"imageUrl\", ImgHash);\n\n    const resFile2 = await axios({\n      method: \"post\",\n      url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n      data: pdfContent,\n      headers: {\n        pinata_api_key: `d76c8114a0507d7487f6`,\n        pinata_secret_api_key: `2eeb01942559b51fff940cab063a77afd208a4c5ca13dd57d58a8647a9ad67b4`,\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    const pdfHash = `https://gateway.pinata.cloud/ipfs/${resFile2.data.IpfsHash}`;\n    form.append(\"pdfUrl\", pdfHash);\n\n    const resFile3 = await axios({\n      method: \"post\",\n      url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n      data: videoContent,\n      headers: {\n        pinata_api_key: `d76c8114a0507d7487f6`,\n        pinata_secret_api_key: `2eeb01942559b51fff940cab063a77afd208a4c5ca13dd57d58a8647a9ad67b4`,\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    const videoHash = `https://gateway.pinata.cloud/ipfs/${resFile3.data.IpfsHash}`;\n    form.append(\"videoUrl\", videoHash);\n\n    console.log(ImgHash);\n    console.log(pdfHash);\n    console.log(videoHash);\n\n    axios\n      .post(\"http://localhost:4000/courses/upload\", form)\n      .then(async (res) => {\n        setCount(count + 1);\n        getCourses();\n        setCourseID(courseID + 1);\n      })\n      .catch((err) => {\n        if (!err) {\n          console.log(\"Network Error\");\n        } else console.log(err);\n      });\n  };\n\n  const getCourses = async () => {\n    axios\n      .post(\n        \"http://localhost:4000/courses/educator\",\n        { id: id.id },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      )\n      .then((res) => {\n        if (res.data !== undefined) setResults(res.data);\n      })\n      .catch((err) => {\n        if (!err) {\n          console.log(\"Network Error\");\n        } else console.log(err);\n      });\n  };\n\n  const ShowResults = () => {\n    return (\n      <div>\n        {results.map((el, idx) => (\n          <CourseCard\n            key={idx}\n            title={el.name}\n            c_id={el.id}\n            s_name={\"Kevin Peter\"}\n            desc={el.description}\n            subs={el.users}\n            price={el.price}\n            author={el.author}\n            id={id.id}\n            thumbnail={el.thumbnail}\n            type={false}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  const ShowSubmissions = () => {\n    return (\n      <div>\n        {submissions.map((el, idx) => (\n          <SubmissionCard\n            key={idx}\n            address={address}\n            std_name={el.std_name}\n            marks={el.marks}\n            course_name={el.course_name}\n            std_id={el.std_id}\n            course_id={el.course_id}\n            contract={contract}\n            tx={el.transaction_hash}\n            content={el.content}\n            student_address={el.address}\n            ts_contract={ts_contract}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  const getBalance = async () => {\n    if (t_contract !== undefined && id.id != null) {\n      await t_contract.methods\n        .getBalance(address)\n        .call()\n        .then((res) => {\n          console.log(res);\n          if (res != null) {\n            setBalance(res);\n          }\n        });\n    }\n  };\n\n  if (contract === undefined) {\n    return <Metamask_Error />;\n  } else if (id.id === null) {\n    return (\n      <div className=\"Error\">\n        <h1>You are not authorised to view this page</h1>\n        <Link to=\"/\">Home</Link>\n      </div>\n    );\n  } else\n    return (\n      <div>\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n          <Row>\n            <Col sm={2} className=\"\">\n              <Nav variant=\"pills\" className=\"flex-column m-2\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"first\">Courses</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"second\">Submissions</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"third\">Payments</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Col>\n            <Col sm={10}>\n              <Tab.Content>\n                <Tab.Pane eventKey=\"first\">\n                  <div className=\"info-panel\">\n                    <div className=\"left\">\n                      <h4 id=\"info-name\">Welcome {author || null}</h4>\n                      <p id=\"info-address\">Address: {address || null}</p>\n                    </div>\n                    <div className=\"right\">\n                      <Button\n                        className=\"btn-primary my-3\"\n                        variant=\"dark\"\n                        onClick={handleShow}\n                      >\n                        Add Course\n                      </Button>\n                    </div>\n                  </div>\n                  <Modal show={show} onHide={handleClose} animation={false}>\n                    <Modal.Header closeButton>\n                      <Modal.Title>Add Course</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                      <form className=\"form-container\">\n                        <div className=\"form-field\">\n                          <label htmlFor=\"name\">\n                            <i className=\"fas fa-signature\"></i>\n                          </label>\n                          <input\n                            type=\"text\"\n                            id=\"name\"\n                            style={{ width: \"80%\" }}\n                            name=\"name\"\n                            placeholder=\"Title\"\n                            onChange={(e) => {\n                              setName(e.target.value);\n                            }}\n                          ></input>\n                        </div>\n                        <div className=\"form-field\">\n                          <label htmlFor=\"desc\">\n                            <i className=\"fas fa-comment-alt\"></i>\n                          </label>\n                          <input\n                            type=\"text\"\n                            id=\"desc\"\n                            style={{ width: \"80%\" }}\n                            name=\"desc\"\n                            placeholder=\"Description\"\n                            onChange={(e) => {\n                              setDesc(e.target.value);\n                            }}\n                          ></input>\n                        </div>\n                        <div className=\"form-field\">\n                          <label htmlFor=\"price\">\n                            <i className=\"fas fa-dollar-sign\"></i>\n                          </label>\n                          <input\n                            type=\"text\"\n                            id=\"price\"\n                            style={{ width: \"80%\" }}\n                            name=\"price\"\n                            placeholder=\"Price\"\n                            onChange={(e) => {\n                              setPrice(e.target.value);\n                            }}\n                          ></input>\n                        </div>\n                        <div className=\"form-field\">\n                          <label htmlFor=\"assignment\">\n                            <i className=\"fas fa-file-alt\"></i>\n                          </label>\n                          <input\n                            type=\"text\"\n                            id=\"assgn\"\n                            style={{ width: \"80%\" }}\n                            name=\"assgn\"\n                            placeholder=\"Assignment Question\"\n                            onChange={(e) => {\n                              setQues(e.target.value);\n                            }}\n                          ></input>\n                        </div>\n                        <div className=\"form-field\">\n                          <label htmlFor=\"deadline\">\n                            <i className=\"fas fa-calendar-check\"></i>\n                          </label>\n                          <input\n                            type=\"number\"\n                            id=\"deadline\"\n                            style={{ width: \"80%\" }}\n                            name=\"deadline\"\n                            placeholder=\"Deadline\"\n                            onChange={(e) => {\n                              setDline(e.target.value);\n                            }}\n                          ></input>\n                        </div>\n                        <div>\n                          <input\n                            type=\"file\"\n                            name=\"file\"\n                            onChange={t_changeHandler}\n                          />\n                          {isThumbnailPicked ? (\n                            <p>\n                              Size:{\" \"}\n                              {thumbnail === undefined\n                                ? \"0\"\n                                : (thumbnail.size / 1000000).toFixed(1)}{\" \"}\n                              MB\n                            </p>\n                          ) : (\n                            <p>Upload Course thumbnail</p>\n                          )}\n                        </div>\n                        <div>\n                          <input\n                            type=\"file\"\n                            name=\"file\"\n                            onChange={c_changeHandler}\n                          />\n                          {isContentPicked ? (\n                            content == null ? (\n                              \"\"\n                            ) : (\n                              <>\n                                <p>\n                                  Size: {(content.size / 1000000).toFixed(1)}MB\n                                </p>\n                              </>\n                            )\n                          ) : (\n                            <p>Upload Course content slides</p>\n                          )}\n                        </div>\n                        <div>\n                          <input\n                            type=\"file\"\n                            name=\"file\"\n                            onChange={v_changeHandler}\n                          />\n                          {isVideoPicked ? (\n                            video == null ? (\n                              \"\"\n                            ) : (\n                              <>\n                                <p>\n                                  Size: {(video.size / 1000000).toFixed(1)}MB\n                                </p>\n                              </>\n                            )\n                          ) : (\n                            <p>Upload Course content video</p>\n                          )}\n                        </div>\n                      </form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                      <Button variant=\"danger\" onClick={handleClose}>\n                        Cancel\n                      </Button>\n                      <Button variant=\"success\" onClick={uploadCourse}>\n                        Publish Course\n                      </Button>\n                    </Modal.Footer>\n                  </Modal>\n                  <h3>\n                    You have created {count} course{count === 1 ? null : \"s\"}\n                  </h3>\n                  <ShowResults />\n                </Tab.Pane>\n                <Tab.Pane eventKey=\"second\">\n                  <h3>\n                    You have {submissions.length} submission\n                    {submissions.length === 1 ? null : \"s\"}\n                  </h3>\n                  <ShowSubmissions />\n                </Tab.Pane>\n                <Tab.Pane eventKey=\"third\">\n                  <div className=\"result\">\n                    <p>\n                      Your balance:{\" \"}\n                      <Badge variant=\"success\">{balance} EDBX</Badge>\n                    </p>\n                  </div>\n                </Tab.Pane>\n              </Tab.Content>\n            </Col>\n          </Row>\n        </Tab.Container>\n      </div>\n    );\n};\nexport default Educator;\n","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/signup.js",[],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/login.js",["165","166","167","168"],"import React, { useContext, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext\";\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport \"../styles/Login.css\";\n\nexport const Login = ({ contract }) => {\n  const history = useHistory();\n  const [pass, setPass] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(true);\n  const { setID } = useContext(UserContext);\n  const [fail, setFail] = useState(false);\n  const [passerr, setPasserr] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const error = (err) => {\n    if (err) {\n      return (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          <p>Please fill all fields</p>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const failure = () => {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        <h5>Incorrect Details. Check username/password</h5>\n      </div>\n    );\n  };\n\n  const loginfunc = async () => {\n    if (type === true) {\n      await contract.methods\n        .studentLogin(name, pass)\n        .call()\n        .then(\n          await contract?.methods\n            .studentLogin(name, pass)\n            .call()\n            .then((res) => {\n              setLoading(false);\n              if (res[0] != -1 && res[0] != 0) {\n                setID({ id: res[0], user: \"student\" });\n                setFail(false);\n                history.push(\"/student\");\n              } else {\n                setFail(true);\n              }\n            })\n        );\n    } else {\n      await contract.methods\n        .educatorLogin(name, pass)\n        .call()\n        .then((res) => {\n          setLoading(false);\n          if (res[0] != -1 && res[0] != 0) {\n            setID({ id: res[0], user: \"educator\" });\n            setFail(false);\n            history.push(\"/educator\");\n          } else {\n            setFail(true);\n          }\n        });\n    }\n  };\n\n  const post = () => {\n    if (pass.length === 0 || name.length === 0) {\n      setPasserr(true);\n    } else {\n      setLoading(true);\n      setPasserr(false);\n      loginfunc();\n    }\n  };\n  return (\n    <div className=\"outer-container justify-content-center\">\n      <div className=\"text-center py-2\">{fail ? failure() : null}</div>\n      <div className=\"text-center py-2\">\n        <h4 className=\"text-black\">Login</h4>\n      </div>\n      <div className=\"col-md-4 offset-md-4 py-2\">\n        <form>\n          <div className=\"form-field\">\n            <span>\n              <i className=\"fas fa-user-circle fa-2x text-black\"></i>\n            </span>\n            <input\n              className=\"form-control my-2\"\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              placeholder=\"Name\"\n              autoComplete=\"on\"\n              onChange={(e) => setName(e.target.value)}\n            ></input>\n          </div>\n          <div className=\"form-field\">\n            <span>\n              <i className=\"fas fa-key fa-2x text-black\"></i>\n            </span>\n            <input\n              className=\"form-control my-2\"\n              type=\"password\"\n              id=\"pass\"\n              name=\"pass\"\n              placeholder=\"Password\"\n              autoComplete=\"on\"\n              onChange={(e) => setPass(e.target.value)}\n            ></input>\n          </div>\n          {passerr ? error(true) : null}\n        </form>\n        <div className=\"custom-control custom-switch\">\n          <input\n            type=\"checkbox\"\n            className=\"custom-control-input\"\n            id=\"customSwitchesChecked\"\n            defaultChecked\n            onChange={(e) => {\n              setType(!type);\n            }}\n          />\n          <label\n            className=\"custom-control-label text-black\"\n            htmlFor=\"customSwitchesChecked\"\n          >\n            {type ? \"Student Account\" : \"Educator Account\"}\n          </label>\n        </div>\n      </div>\n      <div className=\"col-md-4 offset-md-4 text-center py-2\">\n        <button type=\"submit\" className=\"btn btn-success\" onClick={post}>\n          {loading ? (\n            <Loader type=\"TailSpin\" height=\"30\" width=\"30\" color=\"#fff\" />\n          ) : (\n            \"Login\"\n          )}\n        </button>\n        <div className=\"access-info\">\n          <span>\n            <i className=\"fas fa-hand-point-right fa-2x text-black\"></i>\n          </span>\n          <p className=\"bg-white\">\n            <em className=\"text-black\">Don't have an account?&nbsp;</em>\n            <Link to={\"/signup\"}> Create one now!</Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Course.js",["169","170","171"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\nimport {\n  Nav,\n  Button,\n  Row,\n  Col,\n  Tab,\n  Form,\n  Badge,\n  Alert,\n} from \"react-bootstrap\";\nimport \"../styles/Course.css\";\nimport { useLocation } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext\";\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nconst axios = require(\"axios\");\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nexport const Course = ({ address, contract }) => {\n  const { id } = useContext(UserContext);\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [isContentPicked, setContentPicked] = useState(false);\n  const [courseName, setCourseName] = useState(\" \");\n  const [courseID, setCourseID] = useState(1);\n  const [std_Name, setStd_Name] = useState(\" \");\n  const [std_ID, setStd_ID] = useState(1);\n  const [author, setAuthor] = useState(\" \");\n  const [authorID, setAuthorID] = useState(1);\n  const [content, setContent] = useState();\n  const [question, setQuestion] = useState(\" \");\n  const [deadline, setDeadline] = useState();\n  const [marks, setMarks] = useState();\n  const [purchaseTime, setPurchaseTime] = useState(\"\");\n  const [err, setErr] = useState(false);\n  const [show, setShow] = useState(false);\n  const [contentType, setContentType] = useState(\"pdf\");\n  const [videoUrl, setVideoUrl] = useState(\"\");\n\n  let location = useLocation();\n  useEffect(() => {\n    getDetails(location);\n  }, []);\n\n  const getDetails = async (location) => {\n    console.log(\"getDetails is running!\");\n    setStd_Name(location.s_name);\n    setPurchaseTime(new Date(location.deadline * 1000).toString());\n    axios\n      .post(\n        \"http://localhost:4000/courses/content\",\n        { course_id: location.c_id },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      )\n      .then(async (res) => {\n        setAuthor(res.data.author);\n        setAuthorID(res.data.author_id);\n        setContent(res.data.content);\n        setCourseID(res.data.id);\n        setCourseName(res.data.name);\n        setStd_ID(parseInt(id.id));\n        setQuestion(res.data.question);\n        setDeadline(res.data.deadline);\n\n        if (res.data.videoUrl) {\n          const response = await axios.get(res.data.videoUrl, {\n            responseType: \"blob\", // Set the response type to blob\n          });\n          console.log(response);\n          const videoBlob = new Blob([response.data], { type: \"video/mp4\" });\n          const videoUrl = URL.createObjectURL(videoBlob);\n          setVideoUrl(videoUrl);\n        }\n      })\n      .catch((err) => {\n        if (!err) {\n          console.log(\"Network Error\");\n        } else console.log(err);\n      });\n    axios\n      .post(\n        \"http://localhost:4000/submissions/getmarks\",\n        { std_id: id.id, course_id: location.c_id },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      )\n      .then((res) => {\n        setMarks(res.data.marks);\n      })\n      .catch((err) => {\n        if (!err) {\n          console.log(\"Network Error\");\n        } else console.log(err);\n      });\n  };\n\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages);\n  }\n  function changePage(offset) {\n    setPageNumber((prevPageNumber) => prevPageNumber + offset);\n  }\n\n  function previousPage() {\n    changePage(-1);\n  }\n\n  function nextPage() {\n    changePage(1);\n  }\n  const c_changeHandler = (e) => {\n    setContent(e.target.files[0]);\n    setContentPicked(true);\n  };\n  const uploadSubmission = async (e) => {\n    e.preventDefault();\n    const time = Math.round(new Date().getTime() / 1000);\n    //check submission time\n    await contract.methods\n      .submitAssignment(parseInt(std_ID), parseInt(courseID), parseInt(time))\n      .send({ from: address }, (err, hash) => {\n        if (err) console.log(\"Error: \", err);\n        else {\n          const form = new FormData();\n          form.append(\"course_name\", courseName);\n          form.append(\"course_id\", courseID);\n          form.append(\"std_name\", std_Name);\n          form.append(\"std_id\", std_ID);\n          form.append(\"address\", address);\n          form.append(\"author\", author);\n          form.append(\"author_id\", authorID);\n          form.append(\"content\", content);\n          form.append(\"transaction_hash\", hash);\n          form.append(\"submission_time\", time);\n          axios\n            .post(\"http://localhost:4000/submissions/upload\", form)\n            .then(async (res) => {\n              res.status === 200 ? setErr(false) : setErr(true);\n              setShow(true);\n            })\n            .catch((err) => {\n              if (!err) {\n                console.log(\"Network Error\");\n              } else console.log(err);\n            });\n        }\n      });\n  };\n\n  return (\n    <div>\n      <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n        <Row>\n          <Col sm={2} className=\"\">\n            <Nav variant=\"pills\" className=\"flex-column m-2\">\n              <Nav.Item>\n                <Nav.Link eventKey=\"first\">Content</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"second\">Assignment</Nav.Link>\n              </Nav.Item>\n              {id.user === \"student\" ? (\n                <Nav.Item>\n                  <Nav.Link eventKey=\"third\">Grades</Nav.Link>\n                </Nav.Item>\n              ) : null}\n            </Nav>\n          </Col>\n          <Col sm={10}>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"first\">\n                <div>\n                  {content ? (\n                    <Document\n                      file={{ data: content.data }}\n                      onLoadSuccess={onDocumentLoadSuccess}\n                    >\n                      <Page pageNumber={pageNumber} />\n                    </Document>\n                  ) : (\n                    <Loader\n                      type=\"TailSpin\"\n                      color=\"#00BFFF\"\n                      height={150}\n                      width={150}\n                      timeout={3000}\n                    />\n                  )}\n\n                  {content ? (\n                    <>\n                      <p>\n                        Page {pageNumber} of {numPages}\n                      </p>\n                      <div className=\"buttonc\">\n                        <Button\n                          disabled={pageNumber <= 1}\n                          onClick={previousPage}\n                          className=\"mx-2\"\n                        >\n                          Previous\n                        </Button>\n                        <Button\n                          disabled={pageNumber >= numPages}\n                          onClick={nextPage}\n                        >\n                          Next\n                        </Button>\n                      </div>\n                    </>\n                  ) : (\n                    <></>\n                  )}\n                  <br />\n                  <br />\n                  <br />\n                  {videoUrl ? (\n                    <video controls width=\"1155\" height=\"650\">\n                      <source src={videoUrl} type=\"video/mp4\" />\n                      Your browser does not support the video tag.\n                    </video>\n                  ) : (\n                    <Loader\n                      type=\"TailSpin\"\n                      color=\"#00BFFF\"\n                      height={150}\n                      width={150}\n                      timeout={3000}\n                    />\n                  )}\n                </div>\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"second\">\n                <h6 className=\"my-2\" id=\"assignment-ques\">\n                  Assignment Question\n                </h6>\n                <h4 className=\"my-2\">{question}</h4>\n                <Form>\n                  <Form.File\n                    id=\"assignment-file\"\n                    label=\"Choose PDF\"\n                    custom\n                    onChange={c_changeHandler}\n                  />\n                </Form>\n                {isContentPicked && !show ? (\n                  <>\n                    {content === null ? \"\" : <p>File: {content.name}</p>}\n                    {content === null ? (\n                      \"\"\n                    ) : (\n                      <p>Size: {(content.size / 1000000).toFixed(1)}MB</p>\n                    )}\n                  </>\n                ) : (\n                  <h6>Upload Assignment</h6>\n                )}\n                <Button\n                  className=\"btn-success my-4\"\n                  onClick={uploadSubmission}\n                  disabled={\n                    id.user === \"educator\" ||\n                    isContentPicked === false ||\n                    show === true\n                  }\n                >\n                  Submit\n                </Button>\n                <h6 className=\"my-2\" id=\"deadline\">\n                  Submission Deadline <i className=\"far fa-clock\"></i>\n                  {id.user === \"educator\" ? (\n                    <p>{deadline} days</p>\n                  ) : (\n                    <p>{purchaseTime.toString().substring(0, 24)}</p>\n                  )}\n                </h6>\n                {show ? (\n                  err ? (\n                    <Alert\n                      variant=\"danger\"\n                      className=\"alert-dismissible fade show\"\n                    >\n                      <p>Error</p>\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                    </Alert>\n                  ) : (\n                    <Alert\n                      variant=\"success\"\n                      className=\"alert-dismissible fade show\"\n                    >\n                      <p>Success</p>\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                    </Alert>\n                  )\n                ) : null}\n              </Tab.Pane>\n              {id.user === \"student\" ? (\n                <Tab.Pane eventKey=\"third\">\n                  <div className=\"result\">\n                    <p>\n                      {marks ? (\n                        <Badge\n                          variant={\n                            marks >= 90\n                              ? \"success\"\n                              : marks >= 60\n                              ? \"warning\"\n                              : \"danger\"\n                          }\n                        >\n                          Result: {marks}/100 Marks\n                        </Badge>\n                      ) : show ? (\n                        \"Assignment not graded\"\n                      ) : (\n                        \"Please submit Assignment\"\n                      )}\n                    </p>\n                  </div>\n                </Tab.Pane>\n              ) : null}\n            </Tab.Content>\n          </Col>\n        </Row>\n      </Tab.Container>\n    </div>\n  );\n};\n\nexport default Course;\n","/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/metamask_error.js",[],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/CourseCard.js",[],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/infopanel.js",[],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Introduction.js",[],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/Search.js",[],"/Users/sarveshpatil/Downloads/EduBlocks-main/client/src/components/SubmissionCard.js",[],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/index.js",[],["172","173"],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/App.js",[],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/UserContext.js",[],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Footer.js",[],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/student.js",["174","175"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext\";\nimport { Nav, Button, Badge, Row, Col, Tab } from \"react-bootstrap\";\nimport CourseCard from \"./CourseCard\";\nimport Metamask_Error from \"./metamask_error\";\nimport InfoPanel from \"./infopanel\";\nimport { HuddleIframe } from \"@huddle01/iframe\";\n\nconst axios = require(\"axios\");\n\nexport const Student = ({ address, contract, t_contract, ts_contract }) => {\n  const tokenPrice = 100000000000000;\n  const { id } = useContext(UserContext);\n  const [name, setName] = useState(\"\");\n  const [tokens, setTokens] = useState(0);\n  const [balance, setBalance] = useState(0);\n  const [deadline, setDeadline] = useState(0);\n  const [results, setResults] = useState([]);\n  const [meetLink, setMeetLink] = useState(\"\");\n\n  useEffect(() => {\n    getCourses();\n    getBalance();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const getCourses = async () => {\n    if (contract !== undefined && id.id !== null) {\n      await contract.methods\n        .getStudent(id.id)\n        .call()\n        .then(async (res) => {\n          console.log(res);\n          if (res != null || (undefined && res[4][0] != null) || undefined) {\n            setName(res[1]);\n            setDeadline(res[5]);\n          }\n          axios\n            .post(\n              \"http://localhost:4000/courses/student\",\n              { courses: res[4] },\n              { headers: { \"Content-Type\": \"application/json\" } }\n            )\n            .then((res) => {\n              if (res.data !== undefined) setResults(res.data);\n            })\n            .catch((err) => {\n              if (!err) {\n                console.log(\"Network Error\");\n              } else console.log(err);\n            });\n        });\n    }\n  };\n  const getBalance = async () => {\n    if (t_contract !== undefined && id.id != null) {\n      await t_contract.methods\n        .getBalance(address)\n        .call()\n        .then((res) => {\n          console.log(res);\n          setBalance(res);\n        });\n    }\n  };\n  const buyToken = async (total) => {\n    if (ts_contract !== undefined && id.id != null) {\n      await ts_contract.methods\n        .buyTokens(parseInt(tokens))\n        .send({ from: address, value: tokens * tokenPrice }, (err, hash) => {\n          if (err) console.log(\"Error: \", err);\n          else console.log(\"Hash: \", hash);\n        });\n      getBalance();\n    }\n  };\n  const ShowResults = () => {\n    return (\n      <div>\n        {results.map((el, idx) => (\n          <CourseCard\n            key={idx}\n            title={el.name}\n            s_name={name}\n            deadline={deadline}\n            desc={el.description}\n            subs={el.users}\n            price={el.price}\n            c_id={el.id}\n            author={el.author}\n            id={id.id}\n            thumbnail={el.thumbnail}\n            type={false}\n          />\n        ))}\n      </div>\n    );\n  };\n  if (contract === undefined) {\n    return <Metamask_Error />;\n  } else if (id.id == null) {\n    return (\n      <div className=\"Error\">\n        <h1>You are not authorised to view this page</h1>\n        <Link to=\"/\">Home</Link>\n      </div>\n    );\n  } else\n    return (\n      <div>\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n          <Row>\n            <Col sm={2} className=\"\">\n              <Nav variant=\"pills\" className=\"flex-column m-2\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"first\">My Courses</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"second\">Payments</Nav.Link>\n                </Nav.Item>\n                <Nav.Item\n                  onClick={async () => {\n                    const response = await axios.post(\n                      \"https://api.huddle01.com/api/v1/create-iframe-room\",\n                      {\n                        title: \"Huddle01-Test\",\n                      },\n                      {\n                        headers: {\n                          \"Content-Type\": \"application/json\",\n                          \"x-api-key\": \"3EUH3pDXcofjFJWPNcOGvrEU_4t6icOx\",\n                        },\n                      }\n                    );\n\n                    console.log(response);\n                    setMeetLink(response.data.data.meetingLink);\n\n                    const res2 = await axios.post(\n                      \"https://formspree.io/f/xpzvyjkr\",\n                      {\n                        // subject: \"Huddle01-Test\",\n                        message: response.data.data.meetingLink,\n                        email: \"sarveshsamirpatil2002@gmail.com\",\n                      }\n                    );\n                  }}\n                >\n                  <Nav.Link eventKey=\"third\">Meeting</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Col>\n            <Col sm={10}>\n              <Tab.Content>\n                <Tab.Pane eventKey=\"first\">\n                  <InfoPanel address={address} name={name} />\n                  <h4>Courses</h4>\n                  <ShowResults />\n                </Tab.Pane>\n                <Tab.Pane eventKey=\"second\">\n                  <div className=\"result\">\n                    <p>\n                      Your balance:{\" \"}\n                      <Badge variant=\"success\">{balance} LNET</Badge>\n                    </p>\n                  </div>\n                  <div className=\"buyToken\">\n                    <h5>\n                      <label htmlFor=\"token\">\n                        LNET Tokens <i className=\"fas fa-coins\"></i>\n                      </label>\n                    </h5>\n                    <input\n                      type=\"text\"\n                      id=\"edbx\"\n                      name=\"edbx\"\n                      className=\"form-control token\"\n                      placeholder=\"Enter amount\"\n                      onChange={(e) => {\n                        setTokens(e.target.value);\n                      }}\n                    ></input>\n                    <p>\n                      <Badge variant=\"info\">\n                        {tokens * 100000000000000} Wei\n                      </Badge>{\" \"}\n                      = <Badge variant=\"info\">{tokens * 0.0001} Ether</Badge>\n                    </p>\n                    <Button\n                      className=\"btn-primary\"\n                      onClick={(e) => {\n                        buyToken(tokens);\n                      }}\n                      active\n                    >\n                      Buy Token\n                    </Button>\n                  </div>\n                </Tab.Pane>\n                <Tab.Pane eventKey=\"third\">\n                  <h4>Courses</h4>\n                  <div style={{ width: 1000, height: 1000 }}>\n                    {meetLink && (\n                      <HuddleIframe\n                        roomUrl={meetLink}\n                        className=\"aspect-video\"\n                        style={{ width: 1100, height: 700 }}\n                      />\n                    )}\n                  </div>\n                </Tab.Pane>\n              </Tab.Content>\n            </Col>\n          </Row>\n        </Tab.Container>\n      </div>\n    );\n};\n\nexport default Student;\n","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Navbar.js",[],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/login.js",["176","177","178","179"],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Home.js",["180"],"import React from \"react\";\nimport Metamask_Error from \"./metamask_error\";\nimport ethbg_png from \"../assets/eth_gif.gif\";\nimport Search from \"./Search\";\nimport Introduction from \"./Introduction\";\nimport \"../styles/Home.css\";\n\nexport const Home = ({ address, contract, t_contract, ts_contract, error }) => {\n  if (error) {\n    return <Metamask_Error />;\n  } else {\n    return (\n      <div className=\"Home\">\n        <Search\n          address={address}\n          contract={contract}\n          t_contract={t_contract}\n          ts_contract={ts_contract}\n        />\n        <div className=\"intro-container\">\n          <div className=\"intro-text\">\n            <h1>LearnNet</h1>\n            <p id=\"introduction\">\n              An Ethereum Blockchain based Education Platform\n            </p>\n            <p id=\"quote\">\"The more you learn the more you earn\"</p>\n          </div>\n          <div className=\"intro-img\">\n            <img src={ethbg_png} alt=\"blockchain_animation\"></img>\n          </div>\n        </div>\n        <div className=\"information\">\n          <p className=\"text-black\">\n            LNET Token Address: {t_contract?._address}{\" \"}\n            <i\n              className=\"far fa-copy\"\n              onClick={() => {\n                navigator.clipboard.writeText(t_contract._address.toString());\n              }}\n            ></i>\n          </p>\n        </div>\n        <Introduction />\n      </div>\n    );\n  }\n};\n","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/signup.js",[],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Course.js",["181","182","183","184"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\nimport {\n  Nav,\n  Button,\n  Row,\n  Col,\n  Tab,\n  Form,\n  Badge,\n  Alert,\n} from \"react-bootstrap\";\nimport \"../styles/Course.css\";\nimport { useLocation } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext\";\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nconst axios = require(\"axios\");\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nexport const Course = ({ address, contract }) => {\n  const { id } = useContext(UserContext);\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [isContentPicked, setContentPicked] = useState(false);\n  const [courseName, setCourseName] = useState(\" \");\n  const [courseID, setCourseID] = useState(1);\n  const [std_Name, setStd_Name] = useState(\" \");\n  const [std_ID, setStd_ID] = useState(1);\n  const [author, setAuthor] = useState(\" \");\n  const [authorID, setAuthorID] = useState(1);\n  const [content, setContent] = useState();\n  const [question, setQuestion] = useState(\" \");\n  const [deadline, setDeadline] = useState();\n  const [marks, setMarks] = useState();\n  const [purchaseTime, setPurchaseTime] = useState(\"\");\n  const [err, setErr] = useState(false);\n  const [show, setShow] = useState(false);\n  const [contentType, setContentType] = useState(\"pdf\");\n  const [videoUrl, setVideoUrl] = useState(\"\");\n\n  let location = useLocation();\n  useEffect(() => {\n    getDetails(location);\n  }, []);\n\n  const getDetails = async (location) => {\n    console.log(\"getDetails is running!\");\n    setStd_Name(location.s_name);\n    setPurchaseTime(new Date(location.deadline * 1000).toString());\n    axios\n      .post(\n        \"http://localhost:4000/courses/content\",\n        { course_id: location.c_id },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      )\n      .then(async (res) => {\n        setAuthor(res.data.author);\n        setAuthorID(res.data.author_id);\n        setContent(res.data.content);\n        setCourseID(res.data.id);\n        setCourseName(res.data.name);\n        setStd_ID(parseInt(id.id));\n        setQuestion(res.data.question);\n        setDeadline(res.data.deadline);\n\n        if (res.data.videoUrl) {\n          const response = await axios.get(res.data.videoUrl, {\n            responseType: \"blob\", // Set the response type to blob\n          });\n          console.log(response);\n          const videoBlob = new Blob([response.data], { type: \"video/mp4\" });\n          const videoUrl = URL.createObjectURL(videoBlob);\n          setVideoUrl(videoUrl);\n        }\n      })\n      .catch((err) => {\n        if (!err) {\n          console.log(\"Network Error\");\n        } else console.log(err);\n      });\n    axios\n      .post(\n        \"http://localhost:4000/submissions/getmarks\",\n        { std_id: id.id, course_id: location.c_id },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      )\n      .then((res) => {\n        setMarks(res.data.marks);\n      })\n      .catch((err) => {\n        if (!err) {\n          console.log(\"Network Error\");\n        } else console.log(err);\n      });\n  };\n\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages);\n  }\n  function changePage(offset) {\n    setPageNumber((prevPageNumber) => prevPageNumber + offset);\n  }\n\n  function previousPage() {\n    changePage(-1);\n  }\n\n  function nextPage() {\n    changePage(1);\n  }\n  const c_changeHandler = (e) => {\n    setContent(e.target.files[0]);\n    setContentPicked(true);\n  };\n  const uploadSubmission = async (e) => {\n    e.preventDefault();\n    const time = Math.round(new Date().getTime() / 1000);\n    //check submission time\n    await contract.methods\n      .submitAssignment(parseInt(std_ID), parseInt(courseID), parseInt(time))\n      .send({ from: address }, (err, hash) => {\n        if (err) console.log(\"Error: \", err);\n        else {\n          const form = new FormData();\n          form.append(\"course_name\", courseName);\n          form.append(\"course_id\", courseID);\n          form.append(\"std_name\", std_Name);\n          form.append(\"std_id\", std_ID);\n          form.append(\"address\", address);\n          form.append(\"author\", author);\n          form.append(\"author_id\", authorID);\n          form.append(\"content\", content);\n          form.append(\"transaction_hash\", hash);\n          form.append(\"submission_time\", time);\n          axios\n            .post(\"http://localhost:4000/submissions/upload\", form)\n            .then(async (res) => {\n              res.status === 200 ? setErr(false) : setErr(true);\n              setShow(true);\n            })\n            .catch((err) => {\n              if (!err) {\n                console.log(\"Network Error\");\n              } else console.log(err);\n            });\n        }\n      });\n  };\n\n  return (\n    <div>\n      <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n        <Row>\n          <Col sm={2} className=\"\">\n            <Nav variant=\"pills\" className=\"flex-column m-2\">\n              <Nav.Item>\n                <Nav.Link eventKey=\"first\">Content</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"second\">Assignment</Nav.Link>\n              </Nav.Item>\n              {id.user === \"student\" ? (\n                <Nav.Item>\n                  <Nav.Link eventKey=\"third\">Grades</Nav.Link>\n                </Nav.Item>\n              ) : null}\n            </Nav>\n          </Col>\n          <Col sm={10}>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"first\">\n                <div>\n                  {content ? (\n                    <Document\n                      file={{ data: content.data }}\n                      onLoadSuccess={onDocumentLoadSuccess}\n                    >\n                      <Page pageNumber={pageNumber} />\n                    </Document>\n                  ) : (\n                    <Loader\n                      type=\"TailSpin\"\n                      color=\"#00BFFF\"\n                      height={150}\n                      width={150}\n                      timeout={3000}\n                    />\n                  )}\n\n                  {content ? (\n                    <>\n                      <p>\n                        Page {pageNumber} of {numPages}\n                      </p>\n                      <div className=\"buttonc\">\n                        <Button\n                          disabled={pageNumber <= 1}\n                          onClick={previousPage}\n                          className=\"mx-2\"\n                        >\n                          Previous\n                        </Button>\n                        <Button\n                          disabled={pageNumber >= numPages}\n                          onClick={nextPage}\n                        >\n                          Next\n                        </Button>\n                      </div>\n                    </>\n                  ) : (\n                    <></>\n                  )}\n                  <br />\n                  <br />\n                  <br />\n                  {videoUrl ? (\n                    <video controls width=\"1155\" height=\"650\">\n                      <source src={videoUrl} type=\"video/mp4\" />\n                      Your browser does not support the video tag.\n                    </video>\n                  ) : (\n                    <Loader\n                      type=\"TailSpin\"\n                      color=\"#00BFFF\"\n                      height={150}\n                      width={150}\n                      timeout={3000}\n                    />\n                  )}\n                </div>\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"second\">\n                <h6 className=\"my-2\" id=\"assignment-ques\">\n                  Assignment Question\n                </h6>\n                <h4 className=\"my-2\">{question}</h4>\n                <Form>\n                  <Form.File\n                    id=\"assignment-file\"\n                    label=\"Choose PDF\"\n                    custom\n                    onChange={c_changeHandler}\n                  />\n                </Form>\n                {isContentPicked && !show ? (\n                  <>\n                    {content === null ? \"\" : <p>File: {content.name}</p>}\n                    {content === null ? (\n                      \"\"\n                    ) : (\n                      <p>Size: {(content.size / 1000000).toFixed(1)}MB</p>\n                    )}\n                  </>\n                ) : (\n                  <h6>Upload Assignment</h6>\n                )}\n                <Button\n                  className=\"btn-success my-4\"\n                  onClick={uploadSubmission}\n                  disabled={\n                    id.user === \"educator\" ||\n                    isContentPicked === false ||\n                    show === true\n                  }\n                >\n                  Submit\n                </Button>\n                <h6 className=\"my-2\" id=\"deadline\">\n                  Submission Deadline <i className=\"far fa-clock\"></i>\n                  {id.user === \"educator\" ? (\n                    <p>{deadline} days</p>\n                  ) : (\n                    <p>{purchaseTime.toString().substring(0, 24)}</p>\n                  )}\n                </h6>\n                {show ? (\n                  err ? (\n                    <Alert\n                      variant=\"danger\"\n                      className=\"alert-dismissible fade show\"\n                    >\n                      <p>Error</p>\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                    </Alert>\n                  ) : (\n                    <Alert\n                      variant=\"success\"\n                      className=\"alert-dismissible fade show\"\n                    >\n                      <p>Success</p>\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                        aria-label=\"Close\"\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                    </Alert>\n                  )\n                ) : null}\n              </Tab.Pane>\n              {id.user === \"student\" ? (\n                <Tab.Pane eventKey=\"third\">\n                  <div className=\"result\">\n                    <p>\n                      {marks ? (\n                        <div>\n                          {\" \"}\n                          <Badge\n                            variant={\n                              marks >= 90\n                                ? \"success\"\n                                : marks >= 60\n                                ? \"warning\"\n                                : \"danger\"\n                            }\n                          >\n                            Result: {marks}/100 Marks\n                          </Badge>\n                          <div>\n                            <Badge\n                              variant={\n                                marks >= 90\n                                  ? \"success\"\n                                  : marks >= 60\n                                  ? \"warning\"\n                                  : \"danger\"\n                              }\n                            >\n                              <a\n                                className=\"text-white\"\n                                href=\"http://localhost:3001/\"\n                                target=\"_blank\"\n                              >\n                                {\" \"}\n                                Mint Certificate\n                              </a>\n                            </Badge>\n                          </div>\n                        </div>\n                      ) : show ? (\n                        \"Assignment not graded\"\n                      ) : (\n                        \"Please submit Assignment\"\n                      )}\n                    </p>\n                  </div>\n                </Tab.Pane>\n              ) : null}\n            </Tab.Content>\n          </Col>\n        </Row>\n      </Tab.Container>\n    </div>\n  );\n};\n\nexport default Course;\n","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Error.js",[],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/educator.js",["185","186","187"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Nav, Button, Badge, Row, Col, Tab, Modal } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport \"../styles/Educator.css\";\nimport { UserContext } from \"../UserContext\";\nimport SubmissionCard from \"./SubmissionCard\";\nimport CourseCard from \"./CourseCard\";\nimport Metamask_Error from \"./metamask_error\";\nconst axios = require(\"axios\");\n\nexport const Educator = ({ address, contract, t_contract, ts_contract }) => {\n  const { id } = useContext(UserContext);\n  const [count, setCount] = useState(0);\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const [courseID, setCourseID] = useState(1);\n  const [name, setName] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [authorID, setAuthorID] = useState(1);\n  const [price, setPrice] = useState(0);\n  const [ques, setQues] = useState(\"\");\n  const [dline, setDline] = useState(1);\n  const [results, setResults] = useState([]);\n  const [submissions, setSubmissions] = useState([]);\n  const [thumbnail, setThumbnail] = useState();\n  const [content, setContent] = useState();\n  const [video, setVideo] = useState();\n  const [isThumbnailPicked, setThumbnailPicked] = useState(false);\n  const [isContentPicked, setContentPicked] = useState(false);\n  const [isVideoPicked, setVideoPicked] = useState(false);\n  const [cd, setCD] = useState(0);\n  const [balance, setBalance] = useState(0);\n\n  useEffect(async () => {\n    const getDetails = async () => {\n      if (contract !== undefined && id.id != null) {\n        await contract.methods\n          .getCourseCount()\n          .call()\n          .then((res) => {\n            setCourseID(parseInt(res[0]) + 1);\n          });\n        await contract.methods\n          .getEducator(id.id)\n          .call()\n          .then((res) => {\n            if (res !== null && res !== undefined) {\n              setAuthorID(res[0]);\n              setAuthor(res[1]);\n              if (res[4]) setCount(res[4].length);\n            }\n          });\n      }\n    };\n    const getSubmissions = async () => {\n      axios\n        .post(\n          \"http://localhost:4000/submissions/edu_submissions\",\n          { id: id.id },\n          { headers: { \"Content-Type\": \"application/json\" } }\n        )\n        .then((res) => {\n          if (res.data !== undefined) setSubmissions(res.data);\n        })\n        .catch((err) => {\n          if (!err) {\n            console.log(\"Network Error\");\n          } else console.log(err);\n        });\n    };\n    getDetails();\n    getCourses();\n    getSubmissions();\n    getBalance();\n  }, [contract]);\n\n  const t_changeHandler = (e) => {\n    setThumbnail(e.target.files[0]);\n    setThumbnailPicked(true);\n  };\n  const c_changeHandler = (e) => {\n    setContent(e.target.files[0]);\n    setContentPicked(true);\n  };\n  const v_changeHandler = (e) => {\n    setVideo(e.target.files[0]);\n    setVideoPicked(true);\n  };\n\n  const uploadCourse = async (e) => {\n    e.preventDefault();\n    handleClose();\n    await contract.methods\n      .addCourse(\n        name,\n        desc,\n        author,\n        parseInt(price),\n        parseInt(dline),\n        parseInt(authorID)\n      )\n      .send({ from: address }, (err, hash) => {\n        if (err) console.log(\"Error: \", err);\n        else console.log(\"Hash: \", hash);\n      });\n    await contract.methods\n      .getCourseCount()\n      .call()\n      .then((res) => {\n        setCD(parseInt(res));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    await contract.methods\n      .getCourse(parseInt(cd))\n      .call()\n      .then((res) => {\n        setDline(res[7]);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    const form = new FormData();\n    form.append(\"name\", name);\n    form.append(\"id\", courseID);\n    form.append(\"description\", desc);\n    form.append(\"author\", author);\n    form.append(\"author_id\", authorID);\n    form.append(\"address\", address);\n    form.append(\"price\", price);\n    form.append(\"question\", ques);\n    form.append(\"deadline\", dline);\n    form.append(\"thumbnail\", thumbnail);\n    form.append(\"content\", content);\n    form.append(\"video\", video);\n    console.log(content);\n\n    const imageContent = new FormData();\n    imageContent.append(\"file\", thumbnail);\n\n    const pdfContent = new FormData();\n    pdfContent.append(\"file\", content);\n\n    const videoContent = new FormData();\n    videoContent.append(\"file\", video);\n    // form.append(\"content\", content);\n\n    const resFile1 = await axios({\n      method: \"post\",\n      url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n      data: imageContent,\n      headers: {\n        pinata_api_key: `d76c8114a0507d7487f6`,\n        pinata_secret_api_key: `2eeb01942559b51fff940cab063a77afd208a4c5ca13dd57d58a8647a9ad67b4`,\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile1.data.IpfsHash}`;\n    form.append(\"imageUrl\", ImgHash);\n\n    const resFile2 = await axios({\n      method: \"post\",\n      url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n      data: pdfContent,\n      headers: {\n        pinata_api_key: `d76c8114a0507d7487f6`,\n        pinata_secret_api_key: `2eeb01942559b51fff940cab063a77afd208a4c5ca13dd57d58a8647a9ad67b4`,\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    const pdfHash = `https://gateway.pinata.cloud/ipfs/${resFile2.data.IpfsHash}`;\n    form.append(\"pdfUrl\", pdfHash);\n\n    const resFile3 = await axios({\n      method: \"post\",\n      url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n      data: videoContent,\n      headers: {\n        pinata_api_key: `d76c8114a0507d7487f6`,\n        pinata_secret_api_key: `2eeb01942559b51fff940cab063a77afd208a4c5ca13dd57d58a8647a9ad67b4`,\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n    const videoHash = `https://gateway.pinata.cloud/ipfs/${resFile3.data.IpfsHash}`;\n    form.append(\"videoUrl\", videoHash);\n\n    console.log(ImgHash);\n    console.log(pdfHash);\n    console.log(videoHash);\n\n    axios\n      .post(\"http://localhost:4000/courses/upload\", form)\n      .then(async (res) => {\n        setCount(count + 1);\n        getCourses();\n        setCourseID(courseID + 1);\n      })\n      .catch((err) => {\n        if (!err) {\n          console.log(\"Network Error\");\n        } else console.log(err);\n      });\n  };\n\n  const getCourses = async () => {\n    axios\n      .post(\n        \"http://localhost:4000/courses/educator\",\n        { id: id.id },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      )\n      .then((res) => {\n        if (res.data !== undefined) setResults(res.data);\n      })\n      .catch((err) => {\n        if (!err) {\n          console.log(\"Network Error\");\n        } else console.log(err);\n      });\n  };\n\n  const ShowResults = () => {\n    return (\n      <div>\n        {results.map((el, idx) => (\n          <CourseCard\n            key={idx}\n            title={el.name}\n            c_id={el.id}\n            s_name={\"Kevin Peter\"}\n            desc={el.description}\n            subs={el.users}\n            price={el.price}\n            author={el.author}\n            id={id.id}\n            thumbnail={el.thumbnail}\n            type={false}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  const ShowSubmissions = () => {\n    return (\n      <div>\n        {submissions.map((el, idx) => (\n          <SubmissionCard\n            key={idx}\n            address={address}\n            std_name={el.std_name}\n            marks={el.marks}\n            course_name={el.course_name}\n            std_id={el.std_id}\n            course_id={el.course_id}\n            contract={contract}\n            tx={el.transaction_hash}\n            content={el.content}\n            student_address={el.address}\n            ts_contract={ts_contract}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  const getBalance = async () => {\n    if (t_contract !== undefined && id.id != null) {\n      await t_contract.methods\n        .getBalance(address)\n        .call()\n        .then((res) => {\n          console.log(res);\n          if (res != null) {\n            setBalance(res);\n          }\n        });\n    }\n  };\n\n  if (contract === undefined) {\n    return <Metamask_Error />;\n  } else if (id.id === null) {\n    return (\n      <div className=\"Error\">\n        <h1>You are not authorised to view this page</h1>\n        <Link to=\"/\">Home</Link>\n      </div>\n    );\n  } else\n    return (\n      <div>\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n          <Row>\n            <Col sm={2} className=\"\">\n              <Nav variant=\"pills\" className=\"flex-column m-2\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"first\">Courses</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"second\">Submissions</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"third\">Payments</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Col>\n            <Col sm={10}>\n              <Tab.Content>\n                <Tab.Pane eventKey=\"first\">\n                  <div className=\"info-panel\">\n                    <div className=\"left\">\n                      <h4 id=\"info-name\">Welcome {author || null}</h4>\n                      <p id=\"info-address\">Address: {address || null}</p>\n                    </div>\n                    <div className=\"right\">\n                      <Button\n                        className=\"btn-primary my-3\"\n                        variant=\"dark\"\n                        onClick={handleShow}\n                      >\n                        Add Course\n                      </Button>\n                    </div>\n                  </div>\n                  <Modal show={show} onHide={handleClose} animation={false}>\n                    <Modal.Header closeButton>\n                      <Modal.Title>Add Course</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                      <form className=\"form-container\">\n                        <div className=\"form-field\">\n                          <label htmlFor=\"name\">\n                            <i className=\"fas fa-signature\"></i>\n                          </label>\n                          <input\n                            type=\"text\"\n                            id=\"name\"\n                            style={{ width: \"80%\" }}\n                            name=\"name\"\n                            placeholder=\"Title\"\n                            onChange={(e) => {\n                              setName(e.target.value);\n                            }}\n                          ></input>\n                        </div>\n                        <div className=\"form-field\">\n                          <label htmlFor=\"desc\">\n                            <i className=\"fas fa-comment-alt\"></i>\n                          </label>\n                          <input\n                            type=\"text\"\n                            id=\"desc\"\n                            style={{ width: \"80%\" }}\n                            name=\"desc\"\n                            placeholder=\"Description\"\n                            onChange={(e) => {\n                              setDesc(e.target.value);\n                            }}\n                          ></input>\n                        </div>\n                        <div className=\"form-field\">\n                          <label htmlFor=\"price\">\n                            <i className=\"fas fa-dollar-sign\"></i>\n                          </label>\n                          <input\n                            type=\"text\"\n                            id=\"price\"\n                            style={{ width: \"80%\" }}\n                            name=\"price\"\n                            placeholder=\"Price\"\n                            onChange={(e) => {\n                              setPrice(e.target.value);\n                            }}\n                          ></input>\n                        </div>\n                        <div className=\"form-field\">\n                          <label htmlFor=\"assignment\">\n                            <i className=\"fas fa-file-alt\"></i>\n                          </label>\n                          <input\n                            type=\"text\"\n                            id=\"assgn\"\n                            style={{ width: \"80%\" }}\n                            name=\"assgn\"\n                            placeholder=\"Assignment Question\"\n                            onChange={(e) => {\n                              setQues(e.target.value);\n                            }}\n                          ></input>\n                        </div>\n                        <div className=\"form-field\">\n                          <label htmlFor=\"deadline\">\n                            <i className=\"fas fa-calendar-check\"></i>\n                          </label>\n                          <input\n                            type=\"number\"\n                            id=\"deadline\"\n                            style={{ width: \"80%\" }}\n                            name=\"deadline\"\n                            placeholder=\"Deadline\"\n                            onChange={(e) => {\n                              setDline(e.target.value);\n                            }}\n                          ></input>\n                        </div>\n                        <div>\n                          <input\n                            type=\"file\"\n                            name=\"file\"\n                            onChange={t_changeHandler}\n                          />\n                          {isThumbnailPicked ? (\n                            <p>\n                              Size:{\" \"}\n                              {thumbnail === undefined\n                                ? \"0\"\n                                : (thumbnail.size / 1000000).toFixed(1)}{\" \"}\n                              MB\n                            </p>\n                          ) : (\n                            <p>Upload Course thumbnail</p>\n                          )}\n                        </div>\n                        <div>\n                          <input\n                            type=\"file\"\n                            name=\"file\"\n                            onChange={c_changeHandler}\n                          />\n                          {isContentPicked ? (\n                            content == null ? (\n                              \"\"\n                            ) : (\n                              <>\n                                <p>\n                                  Size: {(content.size / 1000000).toFixed(1)}MB\n                                </p>\n                              </>\n                            )\n                          ) : (\n                            <p>Upload Course content slides</p>\n                          )}\n                        </div>\n                        <div>\n                          <input\n                            type=\"file\"\n                            name=\"file\"\n                            onChange={v_changeHandler}\n                          />\n                          {isVideoPicked ? (\n                            video == null ? (\n                              \"\"\n                            ) : (\n                              <>\n                                <p>\n                                  Size: {(video.size / 1000000).toFixed(1)}MB\n                                </p>\n                              </>\n                            )\n                          ) : (\n                            <p>Upload Course content video</p>\n                          )}\n                        </div>\n                      </form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                      <Button variant=\"danger\" onClick={handleClose}>\n                        Cancel\n                      </Button>\n                      <Button variant=\"success\" onClick={uploadCourse}>\n                        Publish Course\n                      </Button>\n                    </Modal.Footer>\n                  </Modal>\n                  <h3>\n                    You have created {count} course{count === 1 ? null : \"s\"}\n                  </h3>\n                  <ShowResults />\n                </Tab.Pane>\n                <Tab.Pane eventKey=\"second\">\n                  <h3>\n                    You have {submissions.length} submission\n                    {submissions.length === 1 ? null : \"s\"}\n                  </h3>\n                  <ShowSubmissions />\n                </Tab.Pane>\n                <Tab.Pane eventKey=\"third\">\n                  <div className=\"result\">\n                    <p>\n                      Your balance:{\" \"}\n                      <Badge variant=\"success\">{balance} LNET</Badge>\n                    </p>\n                  </div>\n                </Tab.Pane>\n              </Tab.Content>\n            </Col>\n          </Row>\n        </Tab.Container>\n      </div>\n    );\n};\nexport default Educator;\n","/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/CourseCard.js",[],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/infopanel.js",[],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/metamask_error.js",[],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Search.js",[],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/Introduction.js",[],"/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/client/src/components/SubmissionCard.js",[],{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":10,"column":12,"nodeType":"194","endLine":10,"endColumn":30},{"ruleId":"192","severity":1,"message":"193","line":100,"column":12,"nodeType":"194","endLine":100,"endColumn":30},{"ruleId":"195","severity":1,"message":"196","line":139,"column":27,"nodeType":"197","messageId":"198","endLine":139,"endColumn":31},{"ruleId":"199","severity":1,"message":"200","line":36,"column":13,"nodeType":"201","endLine":77,"endColumn":4},{"ruleId":"199","severity":1,"message":"202","line":77,"column":6,"nodeType":"203","endLine":77,"endColumn":16,"suggestions":"204"},{"ruleId":"192","severity":1,"message":"193","line":285,"column":12,"nodeType":"194","endLine":285,"endColumn":30},{"ruleId":"205","severity":1,"message":"206","line":49,"column":26,"nodeType":"207","messageId":"208","endLine":49,"endColumn":28},{"ruleId":"205","severity":1,"message":"206","line":49,"column":42,"nodeType":"207","messageId":"208","endLine":49,"endColumn":44},{"ruleId":"205","severity":1,"message":"206","line":64,"column":22,"nodeType":"207","messageId":"208","endLine":64,"endColumn":24},{"ruleId":"205","severity":1,"message":"206","line":64,"column":38,"nodeType":"207","messageId":"208","endLine":64,"endColumn":40},{"ruleId":"195","severity":1,"message":"209","line":39,"column":10,"nodeType":"197","messageId":"198","endLine":39,"endColumn":21},{"ruleId":"195","severity":1,"message":"210","line":39,"column":23,"nodeType":"197","messageId":"198","endLine":39,"endColumn":37},{"ruleId":"199","severity":1,"message":"211","line":45,"column":6,"nodeType":"203","endLine":45,"endColumn":8,"suggestions":"212"},{"ruleId":"188","replacedBy":"213"},{"ruleId":"190","replacedBy":"214"},{"ruleId":"192","severity":1,"message":"193","line":100,"column":12,"nodeType":"194","endLine":100,"endColumn":30},{"ruleId":"195","severity":1,"message":"196","line":139,"column":27,"nodeType":"197","messageId":"198","endLine":139,"endColumn":31},{"ruleId":"205","severity":1,"message":"206","line":49,"column":26,"nodeType":"207","messageId":"208","endLine":49,"endColumn":28},{"ruleId":"205","severity":1,"message":"206","line":49,"column":42,"nodeType":"207","messageId":"208","endLine":49,"endColumn":44},{"ruleId":"205","severity":1,"message":"206","line":64,"column":22,"nodeType":"207","messageId":"208","endLine":64,"endColumn":24},{"ruleId":"205","severity":1,"message":"206","line":64,"column":38,"nodeType":"207","messageId":"208","endLine":64,"endColumn":40},{"ruleId":"192","severity":1,"message":"193","line":10,"column":12,"nodeType":"194","endLine":10,"endColumn":30},{"ruleId":"195","severity":1,"message":"209","line":39,"column":10,"nodeType":"197","messageId":"198","endLine":39,"endColumn":21},{"ruleId":"195","severity":1,"message":"210","line":39,"column":23,"nodeType":"197","messageId":"198","endLine":39,"endColumn":37},{"ruleId":"199","severity":1,"message":"211","line":45,"column":6,"nodeType":"203","endLine":45,"endColumn":8,"suggestions":"215"},{"ruleId":"216","severity":1,"message":"217","line":340,"column":31,"nodeType":"194","endLine":344,"endColumn":32},{"ruleId":"199","severity":1,"message":"200","line":36,"column":13,"nodeType":"201","endLine":77,"endColumn":4},{"ruleId":"199","severity":1,"message":"202","line":77,"column":6,"nodeType":"203","endLine":77,"endColumn":16,"suggestions":"218"},{"ruleId":"192","severity":1,"message":"193","line":285,"column":12,"nodeType":"194","endLine":285,"endColumn":30},"no-native-reassign",["219"],"no-negated-in-lhs",["220"],"react/jsx-pascal-case","Imported JSX component Metamask_Error must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-unused-vars","'res2' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'getBalance', 'getCourses', and 'id.id'. Either include them or remove the dependency array.","ArrayExpression",["221"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'contentType' is assigned a value but never used.","'setContentType' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getDetails' and 'location'. Either include them or remove the dependency array.",["222"],["219"],["220"],["223"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener",["224"],"no-global-assign","no-unsafe-negation",{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"227","fix":"229"},{"desc":"225","fix":"230"},"Update the dependencies array to be: [contract, getBalance, getCourses, id.id]",{"range":"231","text":"232"},"Update the dependencies array to be: [getDetails, location]",{"range":"233","text":"234"},{"range":"235","text":"234"},{"range":"236","text":"232"},[2713,2723],"[contract, getBalance, getCourses, id.id]",[1648,1650],"[getDetails, location]",[1648,1650],[2713,2723]]