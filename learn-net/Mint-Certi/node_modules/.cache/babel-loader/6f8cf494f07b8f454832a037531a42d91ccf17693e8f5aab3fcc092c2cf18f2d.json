{"ast":null,"code":"import { ethers } from \"ethers\";\nimport NFTMinter from \"./Nft-Minter.json\";\nexport async function connectWallet() {\n  await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  console.log(\"signer\", signer);\n  const contract = new ethers.Contract(\"0x0c57C5020Decf95FF3a258CAD772b9340d98EA85\",\n  // Paste your Deployed NFT contract address\n  NFTMinter.abi, signer);\n  return {\n    signer,\n    contract\n  };\n}\nexport async function connectMetaMask() {\n  const {\n    signer\n  } = await connectWallet();\n  const address = await signer.getAddress();\n  const balance = await signer.getBalance();\n  const formattedBalance = ethers.utils.formatEther(balance);\n  return {\n    address,\n    formattedBalance\n  };\n}","map":{"version":3,"names":["ethers","NFTMinter","connectWallet","window","ethereum","request","method","provider","providers","Web3Provider","signer","getSigner","console","log","contract","Contract","abi","connectMetaMask","address","getAddress","balance","getBalance","formattedBalance","utils","formatEther"],"sources":["/Users/sarveshpatil/Desktop/Sarvesh/Code/WebProjects/learn-net/Mint-Certi/src/connectWallet.js"],"sourcesContent":["import { ethers } from \"ethers\";\nimport NFTMinter from \"./Nft-Minter.json\";\n\nexport async function connectWallet() {\n  await window.ethereum.request({ method: \"eth_requestAccounts\" });\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  console.log(\"signer\", signer);\n  const contract = new ethers.Contract(\n    \"0x0c57C5020Decf95FF3a258CAD772b9340d98EA85\", // Paste your Deployed NFT contract address\n    NFTMinter.abi,\n    signer\n  );\n\n  return { signer, contract };\n}\n\nexport async function connectMetaMask() {\n  const { signer } = await connectWallet();\n  const address = await signer.getAddress();\n  const balance = await signer.getBalance();\n  const formattedBalance = ethers.utils.formatEther(balance);\n  return { address, formattedBalance };\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,SAAS,MAAM,mBAAmB;AAEzC,OAAO,eAAeC,aAAaA,CAAA,EAAG;EACpC,MAAMC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;IAAEC,MAAM,EAAE;EAAsB,CAAC,CAAC;EAChE,MAAMC,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAS,CAACC,YAAY,CAACN,MAAM,CAACC,QAAQ,CAAC;EACnE,MAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAS,EAAE;EACnCC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC;EAC7B,MAAMI,QAAQ,GAAG,IAAId,MAAM,CAACe,QAAQ,CAClC,4CAA4C;EAAE;EAC9Cd,SAAS,CAACe,GAAG,EACbN,MAAM,CACP;EAED,OAAO;IAAEA,MAAM;IAAEI;EAAS,CAAC;AAC7B;AAEA,OAAO,eAAeG,eAAeA,CAAA,EAAG;EACtC,MAAM;IAAEP;EAAO,CAAC,GAAG,MAAMR,aAAa,EAAE;EACxC,MAAMgB,OAAO,GAAG,MAAMR,MAAM,CAACS,UAAU,EAAE;EACzC,MAAMC,OAAO,GAAG,MAAMV,MAAM,CAACW,UAAU,EAAE;EACzC,MAAMC,gBAAgB,GAAGtB,MAAM,CAACuB,KAAK,CAACC,WAAW,CAACJ,OAAO,CAAC;EAC1D,OAAO;IAAEF,OAAO;IAAEI;EAAiB,CAAC;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}